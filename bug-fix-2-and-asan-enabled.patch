diff --git a/Dockerfile-Arm64 b/Dockerfile-Arm64
index e509e7f..499f08c 100644
--- a/Dockerfile-Arm64
+++ b/Dockerfile-Arm64
@@ -8,7 +8,7 @@ RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key
 # Update the package lists and install Python 3.8, Python3-pip, curl, and other necessary tools
 RUN apt-get update && apt-get install -y software-properties-common
 RUN add-apt-repository ppa:deadsnakes/ppa
-RUN apt-get update && apt-get install -y python3.8 python3-pip python3.8-dev python3.8-distutils unzip nano curl libgraphviz-dev
+RUN apt-get update && apt-get install -y clang python3.8 python3-pip python3.8-dev python3.8-distutils unzip nano curl libgraphviz-dev
 
 # Update pip for Python 3.8
 RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.8
diff --git a/Dockerfile-Intel b/Dockerfile-Intel
index d3f4dee..9a0b477 100644
--- a/Dockerfile-Intel
+++ b/Dockerfile-Intel
@@ -6,7 +6,7 @@ RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key
 # Update the package lists and install Python 3.10, Python3-pip, curl, and other necessary tools
 RUN apt-get update && apt-get install -y software-properties-common
 RUN add-apt-repository ppa:deadsnakes/ppa
-RUN apt-get update && apt-get install -y python3.10 python3-pip python3.10-dev python3.10-distutils unzip nano curl libgraphviz-dev
+RUN apt-get update && apt-get install -y clang python3.10 python3-pip python3.10-dev python3.10-distutils unzip nano curl libgraphviz-dev
 
 # Update pip for Python 3.10
 RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10
diff --git a/results/sample_POC.txt b/results/sample_POC.txt
new file mode 100644
index 0000000..a06ef40
--- /dev/null
+++ b/results/sample_POC.txt
@@ -0,0 +1 @@
+CREATE TABLE a(b);CREATE VIEW c(d) AS SELECT b FROM a ORDER BY b;SELECT sum(d) OVER( PARTITION BY(SELECT 0 FROM c JOIN a WHERE b =(SELECT b INTERSECT SELECT d FROM c) AND b = 123)) FROM c;
diff --git a/system/Makefile b/system/Makefile
index 2d7bf29..3a29605 100644
--- a/system/Makefile
+++ b/system/Makefile
@@ -7,6 +7,9 @@ all: sqlite3
 sqlite3: shell.c sqlite3.c
 	$(CC) $(CFLAGS) $^ $(LIBS) -o $@
 
+sqlite3-asan: shell.c sqlite3.c
+	clang -fsanitize=address -g $^ $(LIBS) -o sqlite3-asan
+
 coverage-html:
 	gcovr --html --html-details -o coverage_report.html
 
diff --git a/system/run_experiment.py b/system/run_experiment.py
index 7db5c6a..050579f 100644
--- a/system/run_experiment.py
+++ b/system/run_experiment.py
@@ -36,7 +36,7 @@ def remove_file_if_exists(file_path):
 
 # Main experiment class that support all type of fuzzers
 class Experiment:
-    def __init__(self, fuzzer_type, corpus_path = None, db_file = "empty.db", feedback_enabled = False, clean_database = False):
+    def __init__(self, fuzzer_type, db_file, corpus_path = None, feedback_enabled = False, clean_database = False):
         if fuzzer_type == "grammar_based":
             self.fuzzer = MyGrammarFuzzer()
         elif fuzzer_type == "mutation_based":
@@ -66,6 +66,9 @@ class Experiment:
             print(f"[ERROR] The specified fuzzer type '{fuzzer_type}' is not support")
             exit()
             
+        if db_file == None:
+            db_file = "empty.db"
+
         self.db_file = db_file
         self.sqlite3 = self.find_sqlite3_executable()
         self.feedback_enabled = feedback_enabled
@@ -179,7 +182,7 @@ def main():
     if feedback_enabled:
         plot_every_x = 1
 
-    experiment = Experiment(fuzzer_type, corpus, db_file, feedback_enabled, clean_database)
+    experiment = Experiment(fuzzer_type, db_file, corpus, feedback_enabled, clean_database)
     experiment.generate_and_run_k_plot_coverage(runs, plot_every_x)
 
 if __name__ == "__main__":
